# =========================
# GOLDBOT v1 ‚Äî PART 1/2
# =========================
# –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–π Telegram-–±–æ—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –∏ —ç—Ç–∞–ø–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# –ü–æ—Å–ª–µ —ç—Ç–æ–π —á–∞—Å—Ç–∏ –∏–¥—ë—Ç –≤—Ç–æ—Ä–∞—è (Binance API + –ø—Ä–æ–≥–Ω–æ–∑ + –∞–Ω–∏–º–∞—Ü–∏—è)

import asyncio
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import logging

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7816419974:AAGDTqScu5OE2KvmGNPZA-BBYov0XnQCmgI"
ADMIN_ID = 7167007722  # —Ç–≤–æ–π Telegram ID
IMAGE_PATH = "stage.png"  # –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤

# üî§ –ü–µ—Ä–µ–≤–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
LANG_TEXTS = {
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ / Choose language:",
        "lang_selected": "–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω: üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        "register": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
        "request": "–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞",
        "write_me": "‚úâÔ∏è –ù–∞–ø–∏—à–∏ –º–Ω–µ ID",
        "our_channel": "üì¢ –ù–∞—à –∫–∞–Ω–∞–ª",
        "waiting_access": "üîê –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞. –°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        "access_granted": "‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë–º –∞–Ω–∞–ª–∏–∑.",
        "choose_pair": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:",
    },
    "en": {
        "welcome": "Hi there! üëã Please choose your language:",
        "lang_selected": "Language selected: üá¨üáß English",
        "register": "Register",
        "request": "Request Access",
        "write_me": "‚úâÔ∏è Message me your ID",
        "our_channel": "üì¢ Our Channel",
        "waiting_access": "üîê Waiting for access approval. Contact the admin.",
        "access_granted": "‚úÖ Access granted! Starting analysis soon.",
        "choose_pair": "Select a trading pair:",
    },
    "hi": {
        "welcome": "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! üëã ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "lang_selected": "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•Ä ‡§ó‡§à: üáÆüá≥ ‡§π‡§ø‡§Ç‡§¶‡•Ä",
        "register": "‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç",
        "request": "‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§Æ‡§æ‡§Ç‡§ó‡•á",
        "write_me": "‚úâÔ∏è ‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§™‡§®‡§æ ‡§Ü‡§à‡§°‡•Ä ‡§≠‡•á‡§ú‡•á‡§Ç",
        "our_channel": "üì¢ ‡§π‡§Æ‡§æ‡§∞‡§æ ‡§ö‡•à‡§®‡§≤",
        "waiting_access": "üîê ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ ‡§è‡§°‡§Æ‡§ø‡§® ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
        "access_granted": "‚úÖ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ! ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§π‡•à‡•§",
        "choose_pair": "‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç:",
    },
}

# üß† –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# üõ†Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# ======================
#  –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ======================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω ‚Äî –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    keyboard = [
        [
            InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton("üá¨üáß English", callback_data="lang_en"),
            InlineKeyboardButton("üáÆüá≥ ‡§π‡§ø‡§Ç‡§¶‡•Ä", callback_data="lang_hi"),
        ]
    ]

    if update.message:
        chat_id = update.message.chat_id
    else:
        chat_id = update.callback_query.message.chat_id

    await context.bot.send_photo(
        chat_id=chat_id,
        photo=InputFile(IMAGE_PATH),
        caption="–ü—Ä–∏–≤–µ—Ç! üëã Choose your language:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def language_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()

    lang_code = query.data.split("_")[1]
    user_id = query.from_user.id
    user_data[user_id] = {"lang": lang_code, "access": False}

    text = LANG_TEXTS[lang_code]["lang_selected"]
    await query.message.delete()

    await context.bot.send_photo(
        chat_id=user_id,
        photo=InputFile(IMAGE_PATH),
        caption=text,
    )

    await asyncio.sleep(1)
    await registration_step(user_id, context, lang_code)


async def registration_step(user_id, context, lang_code):
    """–≠—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    t = LANG_TEXTS[lang_code]

    keyboard = [
        [
            InlineKeyboardButton(t["register"], callback_data=f"register_{lang_code}"),
            InlineKeyboardButton(t["request"], callback_data=f"request_{lang_code}"),
        ],
        [
            InlineKeyboardButton(
                t["write_me"], url="https://t.me/VikramBiz"
            ),
            InlineKeyboardButton(
                t["our_channel"], url="https://t.me/YourChannelHere"
            ),
        ],
    ]

    await context.bot.send_photo(
        chat_id=user_id,
        photo=InputFile(IMAGE_PATH),
        caption=f"{t['register']} / {t['request']}",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def registration_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    lang_code = user_data[user_id]["lang"]
    t = LANG_TEXTS[lang_code]

    if query.data.startswith("register_"):
        await query.message.delete()
        await context.bot.send_photo(
            chat_id=user_id,
            photo=InputFile(IMAGE_PATH),
            caption=t["waiting_access"],
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø:\n\nID: `{user_id}`\nUsername: @{query.from_user.username}",
            parse_mode="Markdown",
        )

    elif query.data.startswith("request_"):
        await query.message.delete()
        await context.bot.send_photo(
            chat_id=user_id,
            photo=InputFile(IMAGE_PATH),
            caption=t["waiting_access"],
        )

    # –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /allow ID
    return


async def allow_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –≤—Ä—É—á–Ω—É—é"""
    if update.message.chat_id != ADMIN_ID:
        return

    try:
        target_id = int(context.args[0])
        if target_id in user_data:
            user_data[target_id]["access"] = True
            lang = user_data[target_id]["lang"]
            t = LANG_TEXTS[lang]

            await context.bot.send_photo(
                chat_id=target_id,
                photo=InputFile(IMAGE_PATH),
                caption=t["access_granted"],
            )

            await asyncio.sleep(1)
            await send_pair_selection(target_id, context, lang)
        else:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


async def send_pair_selection(user_id, context, lang_code):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
    t = LANG_TEXTS[lang_code]
    pairs = [
        ["BTC/USDT", "ETH/USDT", "BNB/USDT", "SOL/USDT", "XRP/USDT"],
        ["ADA/USDT", "DOGE/USDT", "DOT/USDT", "AVAX/USDT", "TRX/USDT"],
        ["LINK/USDT", "MATIC/USDT", "ATOM/USDT", "LTC/USDT", "SHIB/USDT"],
        ["NEAR/USDT", "APT/USDT", "TON/USDT", "FIL/USDT", "AR/USDT"],
    ]

    keyboard = [[InlineKeyboardButton(pair, callback_data=f"pair_{pair}_{lang_code}") for pair in row] for row in pairs]

    await context.bot.send_photo(
        chat_id=user_id,
        photo=InputFile(IMAGE_PATH),
        caption=t["choose_pair"],
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


# ======================
#   MAIN ENTRY
# ======================

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(language_selected, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(registration_handler, pattern="^(register_|request_)"))
    app.add_handler(CommandHandler("allow", allow_command))
    app.run_polling()


if __name__ == "__main__":
    main()
