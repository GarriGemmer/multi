
#!/usr/bin/env python3
import os
import logging
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ -----------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
POCKET_LINK = os.getenv("POCKET_LINK", "https://bit.ly/pocket-option-rus")
CHANNEL_LINK = os.getenv("CHANNEL_LINK", "https://t.me/your_channel")
SUPPORT_BOT = os.getenv("SUPPORT_BOT", "https://t.me/G0_PLUS_SUPPORTBOT")

# —Å—Å—ã–ª–∫–∏ –∏–∑ .env (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º–∏ ‚Äî –µ—Å—Ç—å –∑–∞–ø–∞—Å–Ω—ã–µ)
IMAGES = {
    "start": os.getenv("BANNER_START_URL", "https://via.placeholder.com/900x400.png?text=Go+Plus+Start"),
    "why": os.getenv("BANNER_WHY_URL", "https://via.placeholder.com/900x400.png?text=Why+Go+Plus"),
    "how": os.getenv("BANNER_HOW_URL", "https://via.placeholder.com/900x400.png?text=How"),
    "gpt": os.getenv("BANNER_GPT_URL", "https://via.placeholder.com/900x400.png?text=GPT-5"),
    "register": os.getenv("BANNER_REGISTER_URL", "https://via.placeholder.com/900x400.png?text=Register"),
}

if not BOT_TOKEN:
    raise RuntimeError("–î–æ–±–∞–≤—å BOT_TOKEN –≤ .env")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- callback constants ----------
LANG_RU = "lang_ru"
LANG_EN = "lang_en"
LANG_HI = "lang_hi"

BTN_START = "btn_start"
BTN_HOW = "btn_how"
BTN_WHY = "btn_why"
BTN_GO = "btn_go"

# ---------- —Ç–µ–∫—Å—Ç—ã (multilang) ----------
TEXTS = {
    "ru": {
        "choose_lang": "‚ÄúChoose your language:",
        "welcome": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Go Plus, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç.\n\nüöÄ –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ –ø—Ä–æ—â–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ.",
        "why": "‚ú® –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç Go Plus:\n\n‚Ä¢ –ë–æ–ª–µ–µ 100 –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ OTC –∏ –±–∏—Ä–∂–µ–≤—ã—Ö –ø–∞—Ä\n‚Ä¢ 2 —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ª—é–±–æ–≥–æ —Å—Ç–∏–ª—è\n‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞\n‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤ 97,89%+\n‚Ä¢ –†–∞–±–æ—Ç–∞—é 24/7 –Ω–∞ –ª—é–±–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n\nüíé –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏ —Ä—ã–Ω–∫–∞.",
        "how": "ü§ñ –í—Å—ë –ø—Ä–æ—Å—Ç–æ:\n\n1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—à—å –∞–∫—Ç–∏–≤\n2Ô∏è‚É£ –£–∫–∞–∑—ã–≤–∞–µ—à—å –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏\n3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ—à—å —Å–∏–≥–Ω–∞–ª: –í—ã—à–µ / –ù–∏–∂–µ\n4Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ—à—å —Å–¥–µ–ª–∫—É\n5Ô∏è‚É£ –§–∏–∫—Å–∏—Ä—É–µ—à—å –ø—Ä–æ—Ñ–∏—Ç üí∏\n\n‚ö°Ô∏è –í—Å—é –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É —è –±–µ—Ä—É –Ω–∞ —Å–µ–±—è ‚Äî —Ç–µ–±–µ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.",
        "gpt": "ü§ñ –Ø –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –±–∞–∑–µ AI GPT-5 –∏ Meta Trader 5 –∫–æ—Ç–æ—Ä—ã–π –∑–∞ —Å–µ–∫—É–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–π –æ–±—ä—ë–º –¥–∞–Ω–Ω—ã—Ö.\n\nüìä –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Ç–Ω–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, —Ü–µ–Ω–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.\n\nüîç –Ø –≤–∏–∂—É –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —á–µ–ª–æ–≤–µ–∫ –∑–∞–º–µ—Ç–∏—Ç —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ.\n\n‚ö°Ô∏è –ö–∞–∂–¥—ã–π –º–æ–π —Å–∏–≥–Ω–∞–ª ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—á–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –∞ –Ω–µ –¥–æ–≥–∞–¥–æ–∫.",
        "register": f"‚ö° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Go Plus, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ Pocket Option —Å—Ç—Ä–æ–≥–æ –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ:\n{POCKET_LINK}",
        "start": "–ù–∞—á–∞—Ç—å",
        "how_btn": "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "why_btn": "–ü–æ—á–µ–º—É —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "go": "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º",
        "reg1": "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        "reg2": "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π ID",
        "reg3": "–ù–∞—à –∫–∞–Ω–∞–ª",
    },
    "en": {
        "choose_lang": "Choose your language:",
        "welcome": "üëã Hi! I'm Go Plus, your personal trading bot.\n\nüöÄ My goal is to help you earn from trading easily and consistently.",
        "why": "‚ú® Why choose Go Plus:\n\n‚Ä¢ 100+ assets for trading\n‚Ä¢ Support for OTC and exchange pairs\n‚Ä¢ 2 trading modes for any style\n‚Ä¢ Instant chart analysis\n‚Ä¢ Signal accuracy 97.89%+\n‚Ä¢ Works 24/7 on any device\n\nüíé You get a tool that stays one step ahead of the market.",
        "how": "ü§ñ It‚Äôs simple:\n\n1Ô∏è‚É£ Choose an asset\n2Ô∏è‚É£ Set trade time\n3Ô∏è‚É£ Get a signal: Up / Down\n4Ô∏è‚É£ Open the trade\n5Ô∏è‚É£ Take profit üí∏\n\n‚ö°Ô∏è I handle all the math and analytics ‚Äî you just act.",
        "gpt": "ü§ñ I‚Äôm built on AI GPT-5 and Meta Trader 5 that processes massive data in seconds.\n\nüìä I analyze hundreds of indicators, price patterns, and technical data.\n\nüîç I spot trends long before humans do.\n\n‚ö°Ô∏è Every signal is based on precise calculations ‚Äî not guesses.",
        "register": f"‚ö° To get access to Go Plus, register a new account on Pocket Option via my link:\n{POCKET_LINK}",
        "start": "Start",
        "how_btn": "How it works",
        "why_btn": "Why it works",
        "go": "Let's go",
        "reg1": "Register",
        "reg2": "Send me your ID",
        "reg3": "Our channel",
    },
    "hi": {
        "choose_lang": "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "welcome": "üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç Go Plus ‡§π‡•Ç‡§Å ‚Äî ‡§Ü‡§™‡§ï‡§æ ‡§™‡§∞‡•ç‡§∏‡§®‡§≤ ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§¨‡•â‡§ü‡•§\n\nüöÄ ‡§Æ‡•á‡§∞‡§æ ‡§ï‡§æ‡§Æ ‡§π‡•à ‡§Ü‡§™‡§ï‡•ã ‡§Ü‡§∏‡§æ‡§® ‡§î‡§∞ ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§∏‡•á ‡§ï‡§Æ‡§æ‡§à ‡§ï‡§∞‡§æ‡§®‡§æ‡•§",
        "why": "‚ú® Go Plus ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ö‡•Å‡§®‡•á‡§Ç:\n\n‚Ä¢ 100+ ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§è‡§∏‡•á‡§ü‡•ç‡§∏\n‚Ä¢ OTC ‡§î‡§∞ ‡§è‡§ï‡•ç‡§∏‡§ö‡•á‡§Ç‡§ú ‡§™‡•á‡§Ø‡§∞‡•ç‡§∏ ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü\n‚Ä¢ ‡§π‡§∞ ‡§∏‡•ç‡§ü‡§æ‡§á‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è 2 ‡§Æ‡•ã‡§°\n‚Ä¢ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£\n‚Ä¢ ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ 97.89%+\n‚Ä¢ 24/7 ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§π‡§∞ ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§™‡§∞\n\nüíé ‡§Ü‡§™‡§ï‡•ã ‡§è‡§ï ‡§ê‡§∏‡§æ ‡§ü‡•Ç‡§≤ ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à ‡§ú‡•ã ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§∏‡•á ‡§π‡§Æ‡•á‡§∂‡§æ ‡§è‡§ï ‡§ï‡§¶‡§Æ ‡§Ü‡§ó‡•á ‡§π‡•à‡•§",
        "how": "ü§ñ ‡§¨‡§π‡•Å‡§§ ‡§Ü‡§∏‡§æ‡§® ‡§π‡•à:\n\n1Ô∏è‚É£ ‡§è‡§∏‡•á‡§ü ‡§ö‡•Å‡§®‡•á‡§Ç\n2Ô∏è‚É£ ‡§ü‡•ç‡§∞‡•á‡§° ‡§∏‡§Æ‡§Ø ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç\n3Ô∏è‚É£ ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§™‡§æ‡§è‡§Ç: ‡§ä‡§™‡§∞ / ‡§®‡•Ä‡§ö‡•á\n4Ô∏è‚É£ ‡§ü‡•ç‡§∞‡•á‡§° ‡§ñ‡•ã‡§≤‡•á‡§Ç\n5Ô∏è‚É£ ‡§™‡•ç‡§∞‡•â‡§´‡§ø‡§ü ‡§≤‡•á‡§Ç üí∏\n\n‚ö°Ô∏è ‡§∏‡§æ‡§∞‡•á ‡§ó‡§£‡§ø‡§§ ‡§î‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Æ‡•à‡§Ç ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§§‡§æ ‡§π‡•Ç‡§Å ‚Äî ‡§Ü‡§™‡§ï‡•ã ‡§¨‡§∏ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡§∞‡§®‡§æ ‡§π‡•à‡•§",
        "gpt": "ü§ñ ‡§Æ‡•à‡§Ç GPT-5 AI Meta Trader 5 ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•Ç‡§Å ‡§ú‡•ã ‡§∏‡•á‡§ï‡§Ç‡§°‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§≠‡§æ‡§∞‡•Ä ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§\n\nüìä ‡§Æ‡•à‡§Ç ‡§∏‡•à‡§ï‡§°‡§º‡•ã‡§Ç ‡§á‡§Ç‡§°‡§ø‡§ï‡•á‡§ü‡§∞‡•ç‡§∏, ‡§™‡•ç‡§∞‡§æ‡§á‡§∏ ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§î‡§∞ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§¶‡•á‡§ñ‡§§‡§æ ‡§π‡•Ç‡§Å‡•§\n\nüîç ‡§Æ‡•à‡§Ç ‡§µ‡•ã ‡§ü‡•ç‡§∞‡•á‡§Ç‡§° ‡§™‡§ï‡§°‡§º‡§§‡§æ ‡§π‡•Ç‡§Å ‡§ú‡•ã ‡§á‡§Ç‡§∏‡§æ‡§® ‡§¶‡•á‡§∞ ‡§∏‡•á ‡§¶‡•á‡§ñ‡•á‡§ó‡§æ‡•§\n\n‚ö°Ô∏è ‡§π‡§∞ ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§∏‡§ü‡•Ä‡§ï ‡§ó‡§£‡§®‡§æ ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•à ‚Äî ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç‡•§",
        "register": f"‚ö° Go Plus ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Æ‡•á‡§∞‡•Ä ‡§≤‡§ø‡§Ç‡§ï ‡§∏‡•á Pocket Option ‡§™‡§∞ ‡§®‡§Ø‡§æ ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Å:\n{POCKET_LINK}",
        "start": "‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
        "how_btn": "‡§Ø‡§π ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à",
        "why_btn": "‡§Ø‡§π ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à",
        "go": "‡§ö‡§≤‡•ã ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
        "reg1": "‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç",
        "reg2": "‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§™‡§®‡§æ ID ‡§≠‡•á‡§ú‡•á‡§Ç",
        "reg3": "‡§π‡§Æ‡§æ‡§∞‡§æ ‡§ö‡•à‡§®‡§≤",
    }
}

# ---------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def keyboard_language():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data=LANG_RU)],
        [InlineKeyboardButton("üá¨üáß English", callback_data=LANG_EN)],
        [InlineKeyboardButton("üáÆüá≥ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", callback_data=LANG_HI)],
    ])

# helper: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ (–∏–ª–∏ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞)
async def send_image(context: ContextTypes.DEFAULT_TYPE, chat_id: int, img_key: str, caption: str, keyboard=None):
    img = IMAGES.get(img_key)
    try:
        if img and os.path.exists(img):
            with open(img, "rb") as f:
                await context.bot.send_photo(chat_id=chat_id, photo=InputFile(f), caption=caption, reply_markup=keyboard)
            return
        if img and (img.startswith("http://") or img.startswith("https://")):
            await context.bot.send_photo(chat_id=chat_id, photo=img, caption=caption, reply_markup=keyboard)
            return
    except Exception as e:
        logger.warning("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É: %s", e)

    await context.bot.send_message(chat_id=chat_id, text=caption, reply_markup=keyboard)

# ---------- –∫–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_image(context, update.effective_chat.id, "start", TEXTS["ru"]["choose_lang"], keyboard_language())

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    chat_id = q.message.chat_id

    if data in (LANG_RU, LANG_EN, LANG_HI):
        lang = data.split("_")[1]
        context.user_data["lang"] = lang
        t = TEXTS[lang]
        try:
            await q.message.delete()
        except Exception:
            pass
        await send_image(context, chat_id, "start", t["welcome"], InlineKeyboardMarkup([[InlineKeyboardButton(t["start"], callback_data=BTN_START)]]))
        return

    lang = context.user_data.get("lang", "ru")
    t = TEXTS[lang]

    if data == BTN_START:
        try:
            await q.message.delete()
        except Exception:
            pass
        await send_image(context, chat_id, "why", t["why"], InlineKeyboardMarkup([[InlineKeyboardButton(t["how_btn"], callback_data=BTN_HOW)]]))
        return

    if data == BTN_HOW:
        try:
            await q.message.delete()
        except Exception:
            pass
        await send_image(context, chat_id, "how", t["how"], InlineKeyboardMarkup([[InlineKeyboardButton(t["why_btn"], callback_data=BTN_WHY)]]))
        return

    if data == BTN_WHY:
        try:
            await q.message.delete()
        except Exception:
            pass
        await send_image(context, chat_id, "gpt", t["gpt"], InlineKeyboardMarkup([[InlineKeyboardButton(t["go"], callback_data=BTN_GO)]]))
        return

    if data == BTN_GO:
        try:
            await q.message.delete()
        except Exception:
            pass
        kb = [
            [InlineKeyboardButton(t["reg1"], url=POCKET_LINK)],
            [InlineKeyboardButton(t["reg2"], url="https://t.me/–¢–í–û–ô_–ü–†–û–§–ò–õ–¨")],
            [InlineKeyboardButton(t["reg3"], url=CHANNEL_LINK)],
        ]
        await send_image(context, chat_id, "register", t["register"], InlineKeyboardMarkup(kb))
        return

    await context.bot.send_message(chat_id=chat_id, text="–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")

# ---------- –∑–∞–ø—É—Å–∫ ----------
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    logger.info("Bot started")
    app.run_polling()

if __name__ == "__main__":
    main()
