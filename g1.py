#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
goplus_bot_full.py
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º, –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å—é,
–ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –ø–æ —ç—Ç–∞–ø–∞–º, —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∞–¥–º–∏–Ω–æ–º (ADMIN_ID),
20 –ø–∞—Ä –∏ 15 —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤, –∞–Ω–∏–º–∞—Ü–∏–µ–π –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º.
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ matplotlib, —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Termux.
"""

import os
import json
import logging
import random
import asyncio
from datetime import datetime
from typing import Optional, Dict

from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters
)

# -------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")  # –ø–æ—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –≤ .env –∏–ª–∏ –ø—Ä—è–º–æ —Å—é–¥–∞
ADMIN_ID = int(os.getenv("ADMIN_ID", "7167007722"))

# –ü–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–µ)
PHOTO_DIR = "photo"
os.makedirs(PHOTO_DIR, exist_ok=True)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ALLOWED_FILE = "allowed_users.json"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger("goplus_bot")

# -------------------- –ö–æ–Ω—Ç–µ–Ω—Ç –∏ —Ç–µ–∫—Å—Ç—ã --------------------
TRADE_PAIRS = [
    "EUR/USD", "USD/JPY", "GBP/USD", "USD/CHF", "AUD/USD",
    "USD/CAD", "NZD/USD", "EUR/JPY", "GBP/JPY", "EUR/GBP",
    "BTC/USD", "ETH/USD", "LTC/USD", "XAU/USD", "XAG/USD",
    "USD/TRY", "USD/ZAR", "EUR/CHF", "GBP/CHF", "AUD/JPY",
]

TIMEFRAMES = [
    "15 sec", "30 sec", "1 min", "2 min", "5 min", "10 min", "15 min", "30 min",
    "1 hour", "2 hours", "4 hours", "8 hours", "12 hours", "1 day", "1 week"
]

# –¢–µ–∫—Å—Ç—ã –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ (rus/en/hi)
TEXTS = {
    "ru": {
        "choose_lang": "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "welcome_btn": "üîµ ACTIVE",
        "welcome": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Go Plus, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç.",
        "why_btn": "–ü–æ—á–µ–º—É —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "how_btn": "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "gpt_btn": "–û –±–æ—Ç–µ",
        "register": "‚ö° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –∏ –¥–æ–∂–¥–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–º.",
        "limited": "üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        "access_granted": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É.",
        "choose_pair": "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:",
        "choose_tf": "‚è± –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
        "processing_step1": "üîÑ –ü–æ–ª—É—á–∞—é —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...",
        "processing_step2": "‚öôÔ∏è –í—ã—á–∏—Å–ª—è—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (SMA, RSI, MACD)...",
        "processing_step3": "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ –æ–±—ä—ë–º—ã...",
        "processing_done": "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!",
        "result_header": "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ ‚Äî {pair} ({tf})",
        "result_body": "Signal: {signal}\nConfidence: {conf}%\n\nIndicators:\nSMA short: {sma_s}\nSMA long: {sma_l}\nRSI: {rsi}\nMACD: {macd}\nVolume trend: {vol}",
        "back": "‚¨ÖÔ∏è –ù–ê–ó–ê–î",
        "ask_write_admin": "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞—à ID –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
        "new_user_admin": "üì• –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n@{uname}\nID: {uid}\n–Ø–∑—ã–∫: {lang}\n–í—Ä–µ–º—è: {time}"
    },
    "en": {
        "choose_lang": "Choose your language:",
        "welcome_btn": "üîµ ACTIVE",
        "welcome": "üëã Hi! I'm Go Plus ‚Äî your trading assistant.",
        "why_btn": "Why it works",
        "how_btn": "How it works",
        "gpt_btn": "About bot",
        "register": "‚ö° To get access, register via the link and wait for admin activation.",
        "limited": "üîí Access restricted. Wait for admin activation.",
        "access_granted": "‚úÖ Access granted! Choose a trading pair.",
        "choose_pair": "üìä Choose trading pair:",
        "choose_tf": "‚è± Choose timeframe:",
        "processing_step1": "üîÑ Fetching market data...",
        "processing_step2": "‚öôÔ∏è Calculating indicators (SMA, RSI, MACD)...",
        "processing_step3": "üîç Checking correlations and volume...",
        "processing_done": "‚úÖ Analysis complete!",
        "result_header": "üìà Analysis result ‚Äî {pair} ({tf})",
        "result_body": "Signal: {signal}\nConfidence: {conf}%\n\nIndicators:\nSMA short: {sma_s}\nSMA long: {sma_l}\nRSI: {rsi}\nMACD: {macd}\nVolume trend: {vol}",
        "back": "‚¨ÖÔ∏è BACK",
        "ask_write_admin": "After registration your ID was sent to admin for activation.",
        "new_user_admin": "üì• New user pending activation:\n@{uname}\nID: {uid}\nLang: {lang}\nTime: {time}"
    },
    "hi": {
        "choose_lang": "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "welcome_btn": "üîµ ACTIVE",
        "welcome": "üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç Go Plus ‡§π‡•Ç‡§Å ‚Äî ‡§Ü‡§™‡§ï‡§æ ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü‡•§",
        "why_btn": "‡§Ø‡§π ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à",
        "how_btn": "‡§Ø‡§π ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à",
        "gpt_btn": "‡§¨‡•â‡§ü ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç",
        "register": "‚ö° ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§™‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "limited": "üîí ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§π‡•à‡•§ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "access_granted": "‚úÖ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§! ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç‡•§",
        "choose_pair": "üìä ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "choose_tf": "‚è± ‡§ü‡§æ‡§á‡§Æ‡§´‡•ç‡§∞‡•á‡§Æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "processing_step1": "üîÑ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§°‡•á‡§ü‡§æ ‡§≤‡•á ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...",
        "processing_step2": "‚öôÔ∏è ‡§á‡§Ç‡§°‡§ø‡§ï‡•á‡§ü‡§∞‡•ç‡§∏ (SMA, RSI, MACD) ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...",
        "processing_step3": "üîç ‡§ï‡•ã‡§∞‡§ø‡§≤‡•á‡§∂‡§® ‡§î‡§∞ ‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§ú‡§æ‡§Å‡§ö ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...",
        "processing_done": "‚úÖ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡•Ç‡§∞‡§æ!",
        "result_header": "üìà ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‚Äî {pair} ({tf})",
        "result_body": "Signal: {signal}\nConfidence: {conf}%\n\nIndicators:\nSMA short: {sma_s}\nSMA long: {sma_l}\nRSI: {rsi}\nMACD: {macd}\nVolume trend: {vol}",
        "back": "‚¨ÖÔ∏è ‡§µ‡§æ‡§™‡§∏",
        "ask_write_admin": "‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§® ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ü‡§™‡§ï‡§æ ID ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•ã ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§",
        "new_user_admin": "üì• ‡§®‡§Ø‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è:\n@{uname}\nID: {uid}\n‡§≠‡§æ‡§∑‡§æ: {lang}\n‡§∏‡§Æ‡§Ø: {time}"
    }
}
# -------------------- –°–æ—Å—Ç–æ—è–Ω–∏—è (–≤ –ø–∞–º—è—Ç–∏) --------------------
# user_lang: —Ö—Ä–∞–Ω–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ user_id)
user_lang: Dict[int, str] = {}
# allowed users set (persist)
allowed_users = set()

# -------------------- –§–∞–π–ª–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã --------------------
def load_allowed():
    global allowed_users
    if os.path.exists(ALLOWED_FILE):
        try:
            with open(ALLOWED_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                allowed_users = set(data.get("allowed", []))
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å allowed_users.json: %s", e)
            allowed_users = set()
    else:
        allowed_users = set()

def save_allowed():
    try:
        with open(ALLOWED_FILE, "w", encoding="utf-8") as f:
            json.dump({"allowed": list(allowed_users)}, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ allowed_users.json: %s", e)

# -------------------- –ü–æ–º–æ—â–Ω–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞–º --------------------
def photo_path(name: str) -> Optional[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫–µ photo, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ None
    """
    p = os.path.join(PHOTO_DIR, name)
    return p if os.path.exists(p) else None

async def send_stage_photo_or_text(context: ContextTypes.DEFAULT_TYPE, chat_id: int,
                                   photo_name: str, text: str,
                                   reply_markup: Optional[InlineKeyboardMarkup] = None,
                                   delete_message_id: Optional[int] = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å) —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç.
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω delete_message_id.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Message (–∏–ª–∏ None).
    """
    try:
        if delete_message_id:
            # –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º—è–≥–∫–æ)
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=delete_message_id)
            except Exception:
                pass

        p = photo_path(photo_name)
        if p:
            with open(p, "rb") as f:
                msg = await context.bot.send_photo(chat_id=chat_id, photo=InputFile(f),
                                                   caption=text, reply_markup=reply_markup)
            return msg
        else:
            msg = await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
            return msg
    except Exception as e:
        logger.exception("send_stage_photo_or_text error: %s", e)
        # fallback text
        try:
            return await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
        except Exception:
            return None

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------
def kb_start():
    return InlineKeyboardMarkup([[InlineKeyboardButton(TEXTS["ru"]["welcome_btn"], callback_data="activate")]])

def kb_language():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
         InlineKeyboardButton("üá¨üáß English", callback_data="lang_en"),
         InlineKeyboardButton("üáÆüá≥ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", callback_data="lang_hi")]
    ])

def kb_welcome_actions(lang: str):
    t = TEXTS[lang]
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(t["how_btn"], callback_data="show_how")],
        [InlineKeyboardButton(t["why_btn"], callback_data="show_why")],
        [InlineKeyboardButton(t["gpt_btn"], callback_data="show_gpt")],
        [InlineKeyboardButton("Register", callback_data="show_register")]
    ])

def kb_after_register(lang: str):
    t = TEXTS[lang]
    return InlineKeyboardMarkup([[InlineKeyboardButton(t["back"], callback_data="back_home")]])

def kb_pairs():
    kb = []
    # 4 –≤ —Å—Ç—Ä–æ–∫–µ ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω–æ
    for i in range(0, len(TRADE_PAIRS), 4):
        row = [InlineKeyboardButton(p, callback_data=f"pair|{p}") for p in TRADE_PAIRS[i:i+4]]
        kb.append(row)
    kb.append([InlineKeyboardButton(TEXTS["ru"]["back"], callback_data="back_home")])
    return InlineKeyboardMarkup(kb)

def kb_timeframes():
    kb = []
    for i in range(0, len(TIMEFRAMES), 5):
        row = [InlineKeyboardButton(tf, callback_data=f"tf|{tf}") for tf in TIMEFRAMES[i:i+5]]
        kb.append(row)
    kb.append([InlineKeyboardButton(TEXTS["ru"]["back"], callback_data="back_pairs")])
    return InlineKeyboardMarkup(kb)

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ --------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/start ‚Äî –ø–æ–∫–∞–∑ GIF/–±–∞–Ω–Ω–µ—Ä–∞ –∏ –∫–Ω–æ–ø–∫–∏ ACTIVE"""
    user = update.effective_user
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ–∑–∂–µ
    user_lang[user.id] = "ru"
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä + –∫–Ω–æ–ø–∫–∞ ACTIVE
    text = TEXTS["ru"]["choose_lang"]
    # use lang photo if exists
    msg = await send_stage_photo_or_text(context, user.id, "lang.jpg", text, reply_markup=kb_language())
    # nothing more here

async def callback_language_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ‚Äî –¥–∞–ª–µ–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ä–∏—é —ç–∫—Ä–∞–Ω–æ–≤: welcome -> why -> how -> gpt -> register"""
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    lang = query.data.split("_", 1)[1]
    user_lang[uid] = lang
    t = TEXTS[lang]

    # delete the language selection message
    try:
        await query.message.delete()
    except Exception:
        pass

    # step sequence: welcome -> why -> how -> gpt -> register
    # for each step: send photo+text with a keyboard to go to next step
    msg = await send_stage_photo_or_text(context, uid, "welcome.jpg", t["welcome"], reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Next", callback_data="next_welcome")]]))
    # store message id in user_data to delete later if needed
    context.user_data["last_msg"] = msg.message_id if msg else None

async def next_welcome_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    lang = user_lang.get(uid, "ru")
    t = TEXTS[lang]

    # delete previous
    try:
        await query.message.delete()
    except Exception:
        pass

    # show WHY
    msg = await send_stage_photo_or_text(context, uid, "why.jpg", t["why"], reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Next", callback_data="next_why")]]))
    context.user_data["last_msg"] = msg.message_id if msg else None

async def next_why_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    lang = user_lang.get(uid, "ru")
    t = TEXTS[lang]

    try:
        await query.message.delete()
    except Exception:
        pass

    msg = await send_stage_photo_or_text(context, uid, "how.jpg", t["how"], reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Next", callback_data="next_how")]]))
    context.user_data["last_msg"] = msg.message_id if msg else None

async def next_how_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    lang = user_lang.get(uid, "ru")
    t = TEXTS[lang]

    try:
        await query.message.delete()
    except Exception:
        pass

    msg = await send_stage_photo_or_text(context, uid, "gpt.jpg", t["gpt"], reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Next", callback_data="next_gpt")]]))
    context.user_data["last_msg"] = msg.message_id if msg else None

async def next_gpt_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    lang = user_lang.get(uid, "ru")
    t = TEXTS[lang]

    try:
        await query.message.delete()
    except Exception:
        pass

    # final registration screen
    msg = await send_stage_photo_or_text(context, uid, "register.jpg", t["register"] + "\n\n" + t["ask_write_admin"], reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("OK", callback_data="registered_ok")]]))
    context.user_data["last_msg"] = msg.message_id if msg else None

    # notify admin automatically about new user (with basic info)
    try:
        admin_text = TEXTS[lang]["new_user_admin"].format(
            uname=(context.bot.get_chat(uid).username or "‚Äî"),
            uid=uid,
            lang=lang.upper(),
            time=datetime.utcnow().isoformat()
        )
    except Exception:
        admin_text = f"üì• New user pending: ID {uid}, lang {lang}"
    # send to admin
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text)
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: %s", e)

async def registered_ok_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    lang = user_lang.get(uid, "ru")
    t = TEXTS[lang]
    # delete message
    try:
        await query.message.delete()
    except Exception:
        pass
    # tell user that they are pending / limited
    await send_stage_photo_or_text(context, uid, "register.jpg", t["limited"], reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("OK", callback_data="back_home")]]))

# -------------------- Admin commands: allow/revoke/list --------------------
def ensure_allowed_loaded():
    if not allowed_users:
        load_allowed()

async def cmd_allow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/allow <user_id> ‚Äî admin only"""
    caller = update.effective_user.id
    if caller != ADMIN_ID:
        await update.message.reply_text("‚ùå Only admin can use this.")
        return
    if not context.args:
        await update.message.reply_text("Usage: /allow <user_id>")
        return
    try:
        uid = int(context.args[0])
    except Exception:
        await update.message.reply_text("Invalid id (must be integer).")
        return
    ensure_allowed_loaded()
    allowed_users.add(uid)
    save_allowed()
    # notify user
    lang = user_lang.get(uid, "ru")
    try:
        await send_stage_photo_or_text(context, uid, "pairs.jpg", TEXTS[lang]["access_granted"], reply_markup=kb_pairs())
    except Exception:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–æ—Å—Ç—É–ø–µ.")
    await update.message.reply_text(f"‚úÖ User {uid} allowed.")

async def cmd_revoke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caller = update.effective_user.id
    if caller != ADMIN_ID:
        await update.message.reply_text("‚ùå Only admin can use this.")
        return
    if not context.args:
        await update.message.reply_text("Usage: /revoke <user_id>")
        return
    try:
        uid = int(context.args[0])
    except Exception:
        await update.message.reply_text("Invalid id (must be integer).")
        return
    ensure_allowed_loaded()
    if uid in allowed_users:
        allowed_users.remove(uid)
        save_allowed()
        await update.message.reply_text(f"‚úÖ User {uid} revoked.")
        try:
            await send_stage_photo_or_text(context, uid, "register.jpg", TEXTS[user_lang.get(uid, "ru")]["limited"])
        except Exception:
            pass
    else:
        await update.message.reply_text("User not found in allowed.")

async def cmd_list_allowed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caller = update.effective_user.id
    if caller != ADMIN_ID:
        await update.message.reply_text("‚ùå Only admin can use this.")
        return
    ensure_allowed_loaded()
    if not allowed_users:
        await update.message.reply_text("No allowed users.")
        return
    await update.message.reply_text("Allowed users:\n" + "\n".join(map(str, sorted(allowed_users))))

# -------------------- Flow: access -> pairs -> timeframes -> analysis --------------------
async def start_signals_flow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Optional entrypoint: user requests signals directly (/signals)"""
    user = update.effective_user
    uid = user.id
    lang = user_lang.get(uid, "ru")
    ensure_allowed_loaded()
    if uid not in allowed_users:
        await send_stage_photo_or_text(context, uid, "register.jpg", TEXTS[lang]["limited"])
        return
    # delete initial message if any
    try:
        await update.message.delete()
    except Exception:
        pass
    # show pairs
    await send_stage_photo_or_text(context, uid, "pairs.jpg", TEXTS[lang]["choose_pair"], reply_markup=kb_pairs())

async def pair_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """User clicked a pair"""
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    ensure_allowed_loaded()
    if uid not in allowed_users:
        lang = user_lang.get(uid, "ru")
        await send_stage_photo_or_text(context, uid, "register.jpg", TEXTS[lang]["limited"])
        return
    lang = user_lang.get(uid, "ru")
    pair = query.data.split("|", 1)[1]
    # delete previous message with keyboard to keep chat clean
    try:
        await query.message.delete()
    except Exception:
        pass
   context.user_data["chosen_pair"] = pair
    await send_stage_photo_or_text(context, uid, "timeframes.jpg", TEXTS[lang]["choose_tf"], reply_markup=kb_timeframes())

async def tf_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """User clicked a timeframe -> run animated analysis -> show result"""
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    ensure_allowed_loaded()
    if uid not in allowed_users:
        lang = user_lang.get(uid, "ru")
        await send_stage_photo_or_text(context, uid, "register.jpg", TEXTS[lang]["limited"])
        return
    lang = user_lang.get(uid, "ru")
    tf = query.data.split("|", 1)[1]
    pair = context.user_data.get("chosen_pair", "‚Äî")

    # delete previous keyboard message
    try:
        await query.message.delete()
    except Exception:
        pass

    # ANIMATION SEQUENCE: we will send 3 stage messages (photo+caption) and delete previous to keep chat clean
    msg1 = await send_stage_photo_or_text(context, uid, "processing1.jpg", TEXTS[lang]["processing_step1"])
    await asyncio.sleep(0.9 + random.random() * 0.6)
    # delete previous
    prev_id = msg1.message_id if msg1 else None
    msg2 = await send_stage_photo_or_text(context, uid, "processing2.jpg", TEXTS[lang]["processing_step2"], delete_message_id=prev_id)
    await asyncio.sleep(0.9 + random.random() * 0.6)
    prev_id = msg2.message_id if msg2 else None
    msg3 = await send_stage_photo_or_text(context, uid, "processing3.jpg", TEXTS[lang]["processing_step3"], delete_message_id=prev_id)
    await asyncio.sleep(0.8 + random.random() * 0.8)
    # final done message (delete previous)
    prev_id = msg3.message_id if msg3 else None
    done_msg = await send_stage_photo_or_text(context, uid, "result.jpg", TEXTS[lang]["processing_done"], delete_message_id=prev_id)

    # simple indicator generation (realistic ranges)
    sma_short = round(random.uniform(0.98, 1.05), 4)
    sma_long = round(sma_short + random.uniform(-0.02, 0.02), 4)
    rsi = round(random.uniform(20, 80), 1)
    macd = round(random.uniform(-0.6, 0.6), 3)
    vol_trend = random.choice(["increasing", "decreasing", "stable"])

    # scoring logic (same as —Ä–∞–Ω—å—à–µ ‚Äî –ø—Ä–æ—Å—Ç–∞—è, –Ω–æ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–∞—è)
    score = 0.0
    if sma_short > sma_long:
        score += 1.2
    else:
        score -= 1.2
    if rsi < 35:
        score += 1.0
    elif rsi > 65:
        score -= 1.0
    if macd > 0.02:
        score += 0.5
    elif macd < -0.02:
        score -= 0.5
    if vol_trend == "increasing":
        score += 0.3
    elif vol_trend == "decreasing":
        score -= 0.3

    if score >= 1.0:
        signal = "üìà UP"
    elif score <= -1.0:
        signal = "üìâ DOWN"
    else:
        signal = "‚ÜîÔ∏è NEUTRAL"

    confidence = min(95, max(50, int(50 + abs(score) * 20 + random.randint(-5, 5))))

    # prepare final text
    header = TEXTS[lang]["result_header"].format(pair=pair, tf=tf)
    body = TEXTS[lang]["result_body"].format(
        signal=signal, conf=confidence, sma_s=sma_short, sma_l=sma_long,
        rsi=rsi, macd=macd, vol=vol_trend
    )
    full_text = header + "\n\n" + body

    # send final result with BACK / NEW buttons
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(TEXTS[lang]["back"], callback_data="back_pairs")],
        [InlineKeyboardButton("üîÅ New forecast", callback_data="new_forecast")]
    ])
    try:
        # delete 'done_msg' to keep only final
        if done_msg:
            await context.bot.delete_message(chat_id=uid, message_id=done_msg.message_id)
    except Exception:
        pass

    await send_stage_photo_or_text(context, uid, "result.jpg", full_text, reply_markup=kb)

    # cleanup chosen_pair
    context.user_data.pop("chosen_pair", None)

async def back_pairs_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    lang = user_lang.get(uid, "ru")
    try:
        await query.message.delete()
    except Exception:
        pass
    await send_stage_photo_or_text(context, uid, "pairs.jpg", TEXTS[lang]["choose_pair"], reply_markup=kb_pairs())

async def new_forecast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    # simply restart pair selection
    try:
        await query.message.delete()
    except Exception:
        pass
    lang = user_lang.get(uid, "ru")
    await send_stage_photo_or_text(context, uid, "pairs.jpg", TEXTS[lang]["choose_pair"], reply_markup=kb_pairs())

# -------------------- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã --------------------
async def cmd_getid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await update.message.reply_text(f"Your Telegram ID: {uid}")

# -------------------- Main / boot --------------------
def build_app():
    load_allowed()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # Commands
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("signals", start_signals_flow))  # quick access
    app.add_handler(CommandHandler("getid", cmd_getid))
    app.add_handler(CommandHandler("allow", cmd_allow))
    app.add_handler(CommandHandler("revoke", cmd_revoke))
    app.add_handler(CommandHandler("list_allowed", cmd_list_allowed))

    # Language selection & onboarding steps
    app.add_handler(CallbackQueryHandler(callback_language_chosen, pattern=r"^lang_"))
    app.add_handler(CallbackQueryHandler(next_welcome_handler, pattern=r"^next_welcome$"))
    app.add_handler(CallbackQueryHandler(next_why_handler, pattern=r"^next_why$"))
    app.add_handler(CallbackQueryHandler(next_how_handler, pattern=r"^next_how$"))
    app.add_handler(CallbackQueryHandler(next_gpt_handler, pattern=r"^next_gpt$"))
    app.add_handler(CallbackQueryHandler(registered_ok_handler, pattern=r"^registered_ok$"))

    # Signal flow
    app.add_handler(CallbackQueryHandler(pair_callback, pattern=r"^pair\|"))
    app.add_handler(CallbackQueryHandler(tf_callback, pattern=r"^tf\|"))
    app.add_handler(CallbackQueryHandler(back_pairs_callback, pattern=r"^back_pairs$"))
    app.add_handler(CallbackQueryHandler(new_forecast_callback, pattern=r"^new_forecast$"))

    # small helpers: back_home
    app.add_handler(CallbackQueryHandler(lambda u, c: send_stage_photo_or_text(c, u.callback_query.from_user.id, "welcome.jpg", TEXTS[user_lang.get(u.callback_query.from_user.id, 'ru')]["welcome"], reply_markup=kb_welcome_actions(user_lang.get(u.callback_query.from_user.id, 'ru'))), pattern=r"^back_home$"))

    return app

def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN not set in environment or .env")
    load_allowed()
    app = build_app()
    logger.info("Bot starting...")
    app.run_polling()

if __name__ == "__main__":
    main()
