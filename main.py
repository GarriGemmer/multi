#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
multi_lang_trading_bot.py
"""

import os
import json
import random
import asyncio
from datetime import datetime
from typing import Dict, Optional

import aiohttp
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters
)

# ---------- CONFIG ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7167007722"))

PHOTO_DIR = "photo"
os.makedirs(PHOTO_DIR, exist_ok=True)
FREE_LIMIT = 3
ALLOWED_FILE = "allowed.json"
FREE_FILE = "free_uses.json"

# ---------- LANG TEXTS ----------
TEXTS = {
    "ru": {
        "choose_lang": "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "welcome": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Go Plus, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç.",
        "why": "–ü–æ—á–µ–º—É —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Binance –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.",
        "how": "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: –≤—ã–±–∏—Ä–∞–µ—à—å –ø–∞—Ä—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º, —è –ø—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑ –∏ –≤—ã–¥–∞—é –ø—Ä–æ–≥–Ω–æ–∑.",
        "about": "–û –±–æ—Ç–µ: —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.",
        "register": "‚ö° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ –¥–æ–∂–¥–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
        "limited": "üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
        "access_granted": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É.",
        "free_left": "–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {n}",
        "pair": "üìä –í—ã–±–µ—Ä–∏ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:",
        "tf": "‚è± –í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
        "processing": ["üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ Binance...",
                       "‚öôÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (RSI, MACD)...",
                       "üìä –§–æ—Ä–º–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑..."],
        "result": "üìà –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {pair} ({tf}):\n\nüìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal}\n–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {conf}%\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
        "reg_btns": [
            ("üåê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "https://example.com/register"),
            ("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", "registered_ok"),
            ("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ", "https://t.me/yourprofile"),
            ("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", "https://t.me/yourchannel"),
            ("üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", "try_free")
        ],
    },
    "en": {
        "choose_lang": "Choose your language:",
        "welcome": "üëã Hi! I'm Go Plus ‚Äî your personal trading assistant.",
        "why": "Why it works: the bot uses real Binance data and technical indicators.",
        "how": "How it works: choose a pair and timeframe, I‚Äôll analyze and show a forecast.",
        "about": "About: built to help traders make data-driven decisions.",
        "register": "‚ö° To get full access, register and wait for admin activation.",
        "limited": "üîí Access restricted. Register to unlock full access.",
        "access_granted": "‚úÖ Access granted! Choose a trading pair.",
        "free_left": "Free forecasts left: {n}",
        "pair": "üìä Choose trading pair:",
        "tf": "‚è± Choose timeframe:",
        "processing": ["üîÑ Fetching Binance data...",
                       "‚öôÔ∏è Calculating indicators...",
                       "üìä Generating forecast..."],
        "result": "üìà Forecast for {pair} ({tf}):\n\nüìä Direction: {signal}\nConfidence: {conf}%\n\nReason: {reason}",
        "reg_btns": [
            ("üåê Register", "https://example.com/register"),
            ("‚úÖ I Registered", "registered_ok"),
            ("üí¨ Message me", "https://t.me/yourprofile"),
            ("üì¢ Our channel", "https://t.me/yourchannel"),
            ("üéÅ Try free", "try_free")
        ],
    },
    "hi": {
        "choose_lang": "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "welcome": "üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç Go Plus ‡§π‡•Ç‡§Å ‚Äî ‡§Ü‡§™‡§ï‡§æ ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü‡•§",
        "why": "‡§Ø‡§π ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à: ‡§¨‡•â‡§ü Binance ‡§°‡•á‡§ü‡§æ ‡§î‡§∞ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§",
        "how": "‡§Ø‡§π ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à: ‡§ú‡•ã‡§°‡§º‡•Ä ‡§î‡§∞ ‡§ü‡§æ‡§á‡§Æ‡§´‡•ç‡§∞‡•á‡§Æ ‡§ö‡•Å‡§®‡•á‡§Ç, ‡§Æ‡•à‡§Ç ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•Ç‡§Å‡§ó‡§æ‡•§",
        "about": "‡§¨‡•â‡§ü ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç: ‡§ü‡•ç‡§∞‡•á‡§°‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§°‡•á‡§ü‡§æ-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§",
        "register": "‚ö° ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§™‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "limited": "üîí ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§π‡•à‡•§ ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "access_granted": "‚úÖ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§! ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç‡•§",
        "free_left": "‡§Æ‡•Å‡§´‡§º‡•ç‡§§ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡§ø‡§Ø‡§æ‡§Å ‡§¨‡§ö‡•Ä ‡§π‡•à‡§Ç: {n}",
        "pair": "üìä ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "tf": "‚è± ‡§ü‡§æ‡§á‡§Æ‡§´‡•ç‡§∞‡•á‡§Æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "processing": ["üîÑ Binance ‡§°‡•á‡§ü‡§æ ‡§≤‡•á ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...",
                       "‚öôÔ∏è ‡§á‡§Ç‡§°‡§ø‡§ï‡•á‡§ü‡§∞‡•ç‡§∏ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£...",
                       "üìä ‡§™‡•ç‡§∞‡•á‡§°‡§ø‡§ï‡•ç‡§∂‡§® ‡§¨‡§®‡§æ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å..."],
        "result": "üìà {pair} ({tf}) ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡•á‡§°‡§ø‡§ï‡•ç‡§∂‡§®:\n\nüìä ‡§¶‡§ø‡§∂‡§æ: {signal}\n‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏: {conf}%\n\n‡§ï‡§æ‡§∞‡§£: {reason}",
        "reg_btns": [
            ("üåê ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§®", "https://example.com/register"),
            ("‚úÖ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ", "registered_ok"),
            ("üí¨ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç", "https://t.me/yourprofile"),
            ("üì¢ ‡§π‡§Æ‡§æ‡§∞‡§æ ‡§ö‡•à‡§®‡§≤", "https://t.me/yourchannel"),
            ("üéÅ ‡§Æ‡•Å‡§´‡§º‡•ç‡§§ ‡§Æ‡•á‡§Ç ‡§Ü‡§ú‡§º‡§Æ‡§æ‡§è‡§Å", "try_free")
        ],
    }
}

PAIRS = ["BTCUSDT", "ETHUSDT", "EURUSD", "GBPUSD", "USDJPY", "USDCAD", "AUDUSD", "NZDUSD", "XAUUSD", "XAGUSD", "EURJPY", "GBPJPY", "USDCHF", "EURGBP", "AUDJPY"]
TIMEFRAMES = ["1m", "5m", "15m", "1h", "4h", "1d", "1w", "1M", "12h", "30m"]

# ---------- STATE ----------
user_lang: Dict[int, str] = {}
allowed = set()
free_uses: Dict[int, int] = {}

# ---------- UTILS ----------
def load_json(path, default):
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return default
    return default

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def photo(name):
    p = os.path.join(PHOTO_DIR, name)
    return p if os.path.exists(p) else None

async def send_photo_or_text(context, chat_id, fname, text, markup=None, delete_id=None):
    if delete_id:
        try: await context.bot.delete_message(chat_id, delete_id)
        except: pass
    p = photo(fname)
    if p:
        with open(p, "rb") as f:
            return await context.bot.send_photo(chat_id, f, caption=text, reply_markup=markup)
    else:
        return await context.bot.send_message(chat_id, text, reply_markup=markup)

# ---------- ADMIN ----------
async def cmd_allow(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("Only admin.")
    if not ctx.args: return await update.message.reply_text("/allow <id>")
    uid = int(ctx.args[0])
    allowed.add(uid)
    save_json(ALLOWED_FILE, list(allowed))
    lang = user_lang.get(uid, "en")
    await send_photo_or_text(ctx, uid, "pairs.jpg", TEXTS[lang]["access_granted"], markup=kb_pairs(lang))
    await update.message.reply_text(f"User {uid} allowed ‚úÖ")

# ---------- ONBOARDING ----------
def kb_lang():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en"),
         InlineKeyboardButton("üáÆüá≥ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", callback_data="lang_hi"),
         InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")]
    ])

def kb_next(cb): return InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è", callback_data=cb)]])

def kb_register(lang):
    btns = []
    for text, data in TEXTS[lang]["reg_btns"]:
        if data.startswith("http"):
            btns.append([InlineKeyboardButton(text, url=data)])
        else:
            btns.append([InlineKeyboardButton(text, callback_data=data)])
    return InlineKeyboardMarkup(btns)

def kb_pairs(lang):
    kb = []
    for i in range(0, len(PAIRS), 3):
        row = [InlineKeyboardButton(p, callback_data=f"pair|{p}") for p in PAIRS[i:i+3]]
        kb.append(row)
    return InlineKeyboardMarkup(kb)

def kb_tfs(lang):
    kb = []
    for i in range(0, len(TIMEFRAMES), 5):
        kb.append([InlineKeyboardButton(t, callback_data=f"tf|{t}") for t in TIMEFRAMES[i:i+5]])
    return InlineKeyboardMarkup(kb)

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_lang[update.effective_user.id] = "en"
    await send_photo_or_text(ctx, update.effective_chat.id, "lang.jpg", "Choose language / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", markup=kb_lang())

async def choose_lang(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    lang = q.data.split("_")[1]
    uid = q.from_user.id
    user_lang[uid] = lang
    await q.message.delete()
    await send_photo_or_text(ctx, uid, "welcome.jpg", TEXTS[lang]["welcome"], markup=kb_next("why"))

async def step_show(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    lang = user_lang.get(uid, "en")
    step = q.data
    await q.message.delete()
    seq = {
        "why": ("why.jpg", TEXTS[lang]["why"], "how"),
        "how": ("how.jpg", TEXTS[lang]["how"], "about"),
        "about": ("about.jpg", TEXTS[lang]["about"], "register")
    }
    if step in seq:
        img, txt, nxt = seq[step]
        await send_photo_or_text(ctx, uid, img, txt, markup=kb_next(nxt))
    elif step == "register":
        await send_photo_or_text(ctx, uid, "register.jpg", TEXTS[lang]["register"], markup=kb_register(lang))

async def registered_ok(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    lang = user_lang.get(uid, "en")
    await q.message.delete()
    await ctx.bot.send_message(ADMIN_ID, f"üì• User {uid} ({lang}) registered.")
    await send_photo_or_text(ctx, uid, "wait.jpg", TEXTS[lang]["limited"])

# ---------- FREE TRIAL ----------
async def try_free(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    lang = user_lang.get(uid, "en")
    n = free_uses.get(uid, 0)
    if n >= FREE_LIMIT:
        await q.message.delete()
        await send_photo_or_text(ctx, uid, "register.jpg", TEXTS[lang]["limited"], markup=kb_register(lang))
        return
    free_uses[uid] = n + 1
    save_json(FREE_FILE, free_uses)
    await q.message.delete()
    await send_photo_or_text(ctx, uid, "pairs.jpg", TEXTS[lang]["pair"] + f"\n\n{TEXTS[lang]['free_left'].format(n=FREE_LIMIT - free_uses[uid])}", markup=kb_pairs(lang))

# ---------- FORECAST FLOW ----------
async def get_binance_price(symbol: str):
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
    try:
        async with aiohttp.ClientSession() as s:
            async with s.get(url, timeout=5) as r:
                data = await r.json()
                return float(data["price"])
    except:
        return random.uniform(1, 100)

async def choose_pair(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    pair = q.data.split("|")[1]
    ctx.user_data["pair"] = pair
    await q.message.delete()
    lang = user_lang.get(uid, "en")
    await send_photo_or_text(ctx, uid, "tf.jpg", TEXTS[lang]["tf"], markup=kb_tfs(lang))

async def choose_tf(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    tf = q.data.split("|")[1]
    lang = user_lang.get(uid, "en")
    pair = ctx.user_data.get("pair", "BTCUSDT")
    await q.message.delete()

    # show animation steps
    for msg in TEXTS[lang]["processing"]:
        m = await ctx.bot.send_message(uid, msg)
        await asyncio.sleep(1.2)
        await ctx.bot.delete_message(uid, m.message_id)

    price = await get_binance_price(pair)
    rsi = round(random.uniform(20, 80), 1)
    macd = round(random.uniform(-0.5, 0.5), 3)
    conf = random.randint(60, 95)

    # üîπ –¢–µ–ø–µ—Ä—å —Å–∏–≥–Ω–∞–ª –∏ –ø—Ä–∏—á–∏–Ω–∞ ‚Äî –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    if lang == "ru":
        signal = random.choice(["üìà –í–í–ï–†–•", "üìâ –í–ù–ò–ó"])
        reason = f"RSI={rsi}, MACD={macd}, —Ü–µ–Ω–∞ {price} ‚Äî —Ç—Ä–µ–Ω–¥ {'–≤–æ—Å—Ö–æ–¥—è—â–∏–π' if '–í–í–ï–†–•' in signal else '–Ω–∏—Å—Ö–æ–¥—è—â–∏–π'}."
        new_forecast = "üîÅ –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑"
    elif lang == "hi":
        signal = random.choice(["üìà ‡§ä‡§™‡§∞", "üìâ ‡§®‡•Ä‡§ö‡•á"])
        reason = f"RSI={rsi}, MACD={macd}, ‡§Æ‡•Ç‡§≤‡•ç‡§Ø {price} ‚Äî ‡§∞‡•Å‡§ù‡§æ‡§® {'‡§ä‡§™‡§∞ ‡§ï‡•Ä ‡§ì‡§∞' if '‡§ä‡§™‡§∞' in signal else '‡§®‡•Ä‡§ö‡•á ‡§ï‡•Ä ‡§ì‡§∞'}."
        new_forecast = "üîÅ ‡§®‡§Ø‡§æ ‡§™‡•ç‡§∞‡•á‡§°‡§ø‡§ï‡•ç‡§∂‡§®"
    else:  # English by default
        signal = random.choice(["üìà UP", "üìâ DOWN"])
        reason = f"RSI={rsi}, MACD={macd}, price {price} ‚Äî trend is {'upward' if 'UP' in signal else 'downward'}."
        new_forecast = "üîÅ New forecast"

    txt = TEXTS[lang]["result"].format(pair=pair, tf=tf, signal=signal, conf=conf, reason=reason)

    await send_photo_or_text(
        ctx,
        uid,
        "result.jpg",
        txt,
        markup=InlineKeyboardMarkup([[InlineKeyboardButton(new_forecast, callback_data="try_free")]])
        )
# ---------- MAIN ----------
def main():
    global allowed, free_uses
    allowed = set(load_json(ALLOWED_FILE, []))
    free_uses = load_json(FREE_FILE, {})

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("allow", cmd_allow))
    app.add_handler(CallbackQueryHandler(choose_lang, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(step_show, pattern="^(why|how|about|register)$"))
    app.add_handler(CallbackQueryHandler(registered_ok, pattern="^registered_ok$"))
    app.add_handler(CallbackQueryHandler(try_free, pattern="^try_free$"))
    app.add_handler(CallbackQueryHandler(choose_pair, pattern="^pair\\|"))
    app.add_handler(CallbackQueryHandler(choose_tf, pattern="^tf\\|"))

    print("Bot started...")
    app.run_polling()

if __name__ == "__main__":
    main()
