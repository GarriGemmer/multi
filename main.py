#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
multi_lang_trading_bot.py
"""

import os
import json
import random
import asyncio
from datetime import datetime
from typing import Dict, Optional

import aiohttp
import threading
from aiohttp import web
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters
)

# ---------- CONFIG ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7167007722"))

PHOTO_DIR = "photo"
os.makedirs(PHOTO_DIR, exist_ok=True)
FREE_LIMIT = 3
ALLOWED_FILE = "allowed.json"
FREE_FILE = "free_uses.json"
CHANNEL_USERNAME = "@InformTrends"  # üëà –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, "@GoPlusNews")
# ---------- LANG TEXTS ----------
TEXTS = {
    "ru": {
        "subscribe": {
            "text": "üîí –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å,\n–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª..",
            "btn_sub": "üì£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
            "btn_check": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            "not_sub": "‚ùó –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.\n@GO_PLUS_SUPPORT\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        },
        "choose_lang": "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "welcome": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Go Plus, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π\n—Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç.\n\nüöÄ –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ\n–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ\n–ø—Ä–æ—â–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ.",
        "why": "‚ú® –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç Go Plus:\n\n‚Ä¢ –ë–æ–ª–µ–µ 100 –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ OTC –∏ –±–∏—Ä–∂–µ–≤—ã—Ö –ø–∞—Ä\n‚Ä¢ 2 —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ª—é–±–æ–≥–æ —Å—Ç–∏–ª—è\n‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞\n‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤ 97,89%+\n‚Ä¢ –†–∞–±–æ—Ç–∞—é 24/7 –Ω–∞ –ª—é–±–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n\nüíé –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç,\n–∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏ —Ä—ã–Ω–∫–∞.",
        "how": "ü§ñ –í—Å—ë –ø—Ä–æ—Å—Ç–æ:\n\n1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—à—å –∞–∫—Ç–∏–≤\n2Ô∏è‚É£ –£–∫–∞–∑—ã–≤–∞–µ—à—å –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏\n3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ—à—å —Å–∏–≥–Ω–∞–ª: –í—ã—à–µ / –ù–∏–∂–µ\n4Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ—à—å —Å–¥–µ–ª–∫—É\n5Ô∏è‚É£ –§–∏–∫—Å–∏—Ä—É–µ—à—å –ø—Ä–æ—Ñ–∏—Ç üí∏\n\n‚ö°Ô∏è –í—Å—é –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É —è –±–µ—Ä—É –Ω–∞ —Å–µ–±—è ‚Äî —Ç–µ–±–µ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.",
        "about": "ü§ñ –Ø –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –±–∞–∑–µ AI GPT-5 –∏ MT4-5,\n–∫–æ—Ç–æ—Ä—ã–µ –∑–∞ —Å–µ–∫—É–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ–≥—Ä–æ–º–Ω—ã–π –æ–±—ä—ë–º –¥–∞–Ω–Ω—ã—Ö.\n\nüìä –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Ç–Ω–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤,\n—Ü–µ–Ω–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.\n\nüîç –Ø –≤–∏–∂—É –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏,\n–∫–æ—Ç–æ—Ä—ã–µ —á–µ–ª–æ–≤–µ–∫ –∑–∞–º–µ—Ç–∏—Ç —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ.\n\n‚ö°Ô∏è –ö–∞–∂–¥—ã–π –º–æ–π —Å–∏–≥–Ω–∞–ª ‚Äî —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n—Ç–æ—á–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –∞ –Ω–µ –¥–æ–≥–∞–¥–æ–∫.",
        "register": "‚ö° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Go Plus,\n–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ Pocket Option\n—Å—Ç—Ä–æ–≥–æ –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ:\nhttps://surl.li/skrdkx\n\n–ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å\n3 –ü–û–î–ê–†–û–ß–ù–´–ï –ø—Ä–æ–≥–Ω–æ–∑–∞\n–∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–µ –¥–µ–Ω—å–≥–∏ —Å GO PLUS üí∏",
        "limited": "üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Pocket Option\n–¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n–∏ –æ—Ç–ø—Ä–∞–≤—å @GO_PLUS_SUPPORT —Å–≤–æ–π ID.",
        "access_granted": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É.",
        "free_left": "–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {n}",
        "pair": "üìä –í—ã–±–µ—Ä–∏ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:",
        "tf": "‚è± –í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
        "processing": ["üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ Binance... ",
                       "‚öôÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (RSI, MACD)...",
                       "üìä –§–æ—Ä–º–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑..."],
        "result": "üìà –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {pair} ({tf}):\n\nüìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal}\n–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {conf}%\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
        "reg_btns": [
            ("üåê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "https://example.com/register"),
            ("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", "registered_ok"),
            ("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ", "https://t.me/GO_PLUS_SUPPORT"),
            ("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", "https://t.me/yourchannel"),
            ("üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", "try_free")
        ],
    },
    "en": {
        "subscribe": {
    "text": "üîí To continue,\nsubscribe to our channel\nand tap ‚ÄúCheck subscription‚Äù.",
    "btn_sub": "üì¢ Subscribe to channel",
    "btn_check": "‚úÖ Check subscription",
    "not_sub": "‚ùó You are not subscribed yet.\n@GO_PLUS_SUPPORT\nPlease subscribe and try again."
},
        "choose_lang": "Choose your language:",
        "welcome": "üëã Hi! I'm Go Plus, your personal\ntrading bot.\n\nüöÄ My goal is to help you\nearn from trading\nmore easily and consistently.",
        "why": "‚ú® Why traders choose Go Plus:\n\n‚Ä¢ Over 100 assets available for trading\n‚Ä¢ Supports OTC and exchange pairs\n‚Ä¢ 2 trading modes for any style\n‚Ä¢ Instant chart analysis\n‚Ä¢ Signal accuracy 97.89%+\n‚Ä¢ Works 24/7 on any device\n\nüíé You get a tool that‚Äôs\nalways one step ahead of the market.",
        "how": "ü§ñ It‚Äôs simple:\n\n1Ô∏è‚É£ Choose an asset\n2Ô∏è‚É£ Set the trade duration\n3Ô∏è‚É£ Get a signal: Up / Down\n4Ô∏è‚É£ Open the trade\n5Ô∏è‚É£ Lock in your profit üí∏\n\n‚ö°Ô∏è I handle all the math and analysis ‚Äî you just take action.",
        "about": "ü§ñ I‚Äôm built on AI GPT-5 and MT4-5,\nprocessing massive amounts of data in seconds.\n\nüìä I analyze hundreds of indicators,\nprice patterns, and both fundamental and technical analysis.\n\nüîç I detect market patterns\nlong before a human would notice them.\n\n‚ö°Ô∏è Every signal I send is the result\nof precise calculations ‚Äî not guesses.",
        "register": "‚ö° To get full access to Go Plus,\ncreate a new account on Pocket Option\nusing my special link:\nhttps://surl.li/skrdkx\n\nIn the meantime, you can try\n3 FREE predictions\nand earn your first profit with GO PLUS üí∏",
        "limited": "üîí Access is restricted.\n\nRegister on the Pocket Option platform\nfor unlimited use\nand send your ID to @GO_PLUS_SUPPORT.",
        "access_granted": "‚úÖ Access granted! Choose a trading pair.",
        "free_left": "Free forecasts left: {n}",
        "pair": "üìä Choose trading pair:",
        "tf": "‚è± Choose timeframe:",
        "processing": ["üîÑ Fetching Binance data...",
                       "‚öôÔ∏è Calculating indicators...",
                       "üìä Generating forecast..."],
        "result": "üìà Forecast for {pair} ({tf}):\n\nüìä Direction: {signal}\nConfidence: {conf}%\n\nReason: {reason}",
        "reg_btns": [
            ("üåê Register", "https://example.com/register"),
            ("‚úÖ I Registered", "registered_ok"),
            ("üí¨ Message me", "https://t.me/GO_PLUS_SUPPORT"),
            ("üì¢ Our channel", "https://t.me/yourchannel"),
            ("üéÅ Try free", "try_free")
        ],
    },
    "hi": {
        "subscribe": {
    "text": "üîí ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è,\n‡§π‡§Æ‡§æ‡§∞‡•á ‡§ö‡•à‡§®‡§≤ ‡§ï‡•ã ‡§∏‡§¨‡•ç‡§∏‡§ï‡•ç‡§∞‡§æ‡§á‡§¨ ‡§ï‡§∞‡•á‡§Ç\n‡§î‡§∞ ‚Äú‡§∏‡§¶‡§∏‡•ç‡§Ø‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç‚Äù ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
    "btn_sub": "üì¢ ‡§ö‡•à‡§®‡§≤ ‡§∏‡§¨‡•ç‡§∏‡§ï‡•ç‡§∞‡§æ‡§á‡§¨ ‡§ï‡§∞‡•á‡§Ç",
    "btn_check": "‚úÖ ‡§∏‡§¨‡•ç‡§∏‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
    "not_sub": "‚ùó ‡§Ü‡§™ ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§∏‡§¨‡•ç‡§∏‡§ï‡•ç‡§∞‡§æ‡§á‡§¨ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§¨‡•ç‡§∏‡§ï‡•ç‡§∞‡§æ‡§á‡§¨ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§\nGO_PLUS_SUPPORT"
},
        "choose_lang": "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "welcome": "üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç Go Plus ‡§π‡•Ç‡§Å, ‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§\n‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§¨‡•â‡§ü‡•§\n\nüöÄ ‡§Æ‡•á‡§∞‡§æ ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø ‡§π‡•à ‡§Ü‡§™‡§ï‡•ã\n‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§∏‡•á ‡§Ü‡§∏‡§æ‡§® ‡§î‡§∞ ‡§∏‡•ç‡§•‡§ø‡§∞\n‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§ï‡§Æ‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡§æ‡•§",
        "why": "‚ú® Go Plus ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ö‡•Å‡§®‡•á‡§Ç:\n\n‚Ä¢ ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è 100+ ‡§è‡§∏‡•á‡§ü‡•ç‡§∏ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß\n‚Ä¢ OTC ‡§î‡§∞ ‡§è‡§ï‡•ç‡§∏‡§ö‡•á‡§Ç‡§ú ‡§™‡•á‡§Ø‡§∞‡•ç‡§∏ ‡§ï‡§æ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§®\n‚Ä¢ ‡§π‡§∞ ‡§∂‡•à‡§≤‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è 2 ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§Æ‡•ã‡§°\n‚Ä¢ ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§ï‡§æ ‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£\n‚Ä¢ ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§ï‡•Ä ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ 97.89%+\n‚Ä¢ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§™‡§∞ 24/7 ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à\n\nüíé ‡§Ü‡§™‡§ï‡•ã ‡§è‡§ï ‡§ê‡§∏‡§æ ‡§ü‡•Ç‡§≤ ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à\n‡§ú‡•ã ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§∏‡•á ‡§è‡§ï ‡§ï‡§¶‡§Æ ‡§Ü‡§ó‡•á ‡§∞‡§π‡§§‡§æ ‡§π‡•à‡•§",
        "how": "ü§ñ ‡§Ø‡§π ‡§¨‡§π‡•Å‡§§ ‡§Ü‡§∏‡§æ‡§® ‡§π‡•à:\n\n1Ô∏è‚É£ ‡§è‡§∏‡•á‡§ü ‡§ö‡•Å‡§®‡•á‡§Ç\n2Ô∏è‚É£ ‡§ü‡•ç‡§∞‡•á‡§° ‡§ï‡•Ä ‡§Ö‡§µ‡§ß‡§ø ‡§§‡§Ø ‡§ï‡§∞‡•á‡§Ç\n3Ô∏è‚É£ ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç: ‡§ä‡§™‡§∞ / ‡§®‡•Ä‡§ö‡•á\n4Ô∏è‚É£ ‡§ü‡•ç‡§∞‡•á‡§° ‡§ñ‡•ã‡§≤‡•á‡§Ç\n5Ô∏è‚É£ ‡§Æ‡•Å‡§®‡§æ‡§´‡§º‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç üí∏\n\n‚ö°Ô∏è ‡§∏‡§æ‡§∞‡•Ä ‡§ó‡§£‡§®‡§æ ‡§î‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Æ‡•à‡§Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Å ‚Äî ‡§Ü‡§™‡§ï‡•ã ‡§¨‡§∏ ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡§®‡•Ä ‡§π‡•à‡•§",
        "about": "ü§ñ ‡§Æ‡•à‡§Ç AI GPT-5 ‡§î‡§∞ MT4-5 ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•Ç‡§Å,\n‡§ú‡•ã ‡§ï‡•Å‡§õ ‡§π‡•Ä ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡§æ‡§≤ ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§\n\nüìä ‡§Æ‡•à‡§Ç ‡§∏‡•à‡§ï‡§°‡§º‡•ã‡§Ç ‡§á‡§Ç‡§°‡§ø‡§ï‡•á‡§ü‡§∞‡•ç‡§∏,\n‡§™‡•ç‡§∞‡§æ‡§á‡§∏ ‡§™‡•à‡§ü‡§∞‡•ç‡§®‡•ç‡§∏ ‡§î‡§∞ ‡§Æ‡•å‡§≤‡§ø‡§ï ‡§µ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§æ ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Å‡•§\n\nüîç ‡§Æ‡•à‡§Ç ‡§µ‡•á ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§¶‡•á‡§ñ‡§§‡§æ ‡§π‡•Ç‡§Å,\n‡§ú‡•ã ‡§á‡§Ç‡§∏‡§æ‡§® ‡§¨‡§π‡•Å‡§§ ‡§¶‡•á‡§∞ ‡§∏‡•á ‡§™‡§π‡§ö‡§æ‡§® ‡§™‡§æ‡§§‡§æ‡•§\n\n‚ö°Ô∏è ‡§Æ‡•á‡§∞‡§æ ‡§π‡§∞ ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§∏‡§ü‡•Ä‡§ï ‡§ó‡§£‡§®‡§æ‡§ì‡§Ç\n‡§ï‡§æ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‚Äî ‡§® ‡§ï‡§ø ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§ï‡§æ‡•§",
        "register": "‚ö° Go Plus ‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§™‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è,\nPocket Option ‡§™‡§∞ ‡§Æ‡•á‡§∞‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§≤‡§ø‡§Ç‡§ï ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡§ï‡•á\n‡§®‡§Ø‡§æ ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç:\nhttps://surl.li/skrdkx\n\n‡§á‡§∏ ‡§¨‡•Ä‡§ö ‡§Ü‡§™ 3 ‡§Æ‡•Å‡§´‡§º‡•ç‡§§ ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§Ü‡§ú‡§º‡§Æ‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç\n‡§î‡§∞ GO PLUS ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡§®‡•Ä ‡§™‡§π‡§≤‡•Ä ‡§ï‡§Æ‡§æ‡§à ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç üí∏",
        "limited": "üîí ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§π‡•à‡•§\n\nPocket Option ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡§º‡•â‡§∞‡•ç‡§Æ ‡§™‡§∞ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç\n‡§Ö‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è\n‡§î‡§∞ ‡§Ö‡§™‡§®‡§æ ID @GO_PLUS_SUPPORT ‡§™‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç‡•§",
        "access_granted": "‚úÖ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§! ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç‡•§",
        "free_left": "‡§Æ‡•Å‡§´‡§º‡•ç‡§§ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡§ø‡§Ø‡§æ‡§Å ‡§¨‡§ö‡•Ä ‡§π‡•à‡§Ç: {n}",
        "pair": "üìä ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "tf": "‚è± ‡§ü‡§æ‡§á‡§Æ‡§´‡•ç‡§∞‡•á‡§Æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "processing": ["üîÑ Binance ‡§°‡•á‡§ü‡§æ ‡§≤‡•á ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...",
                       "‚öôÔ∏è ‡§á‡§Ç‡§°‡§ø‡§ï‡•á‡§ü‡§∞‡•ç‡§∏ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£...",
                       "üìä ‡§™‡•ç‡§∞‡•á‡§°‡§ø‡§ï‡•ç‡§∂‡§® ‡§¨‡§®‡§æ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å..."],
        "result": "üìà {pair} ({tf}) ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡•á‡§°‡§ø‡§ï‡•ç‡§∂‡§®:\n\nüìä ‡§¶‡§ø‡§∂‡§æ: {signal}\n‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏: {conf}%\n\n‡§ï‡§æ‡§∞‡§£: {reason}",
        "reg_btns": [
            ("üåê ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§®", "https://example.com/register"),
            ("‚úÖ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ", "registered_ok"),
            ("üí¨ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç", "https://t.me/GO_PLUS_SUPPORT"),
            ("üì¢ ‡§π‡§Æ‡§æ‡§∞‡§æ ‡§ö‡•à‡§®‡§≤", "https://t.me/yourchannel"),
            ("üéÅ ‡§Æ‡•Å‡§´‡§º‡•ç‡§§ ‡§Æ‡•á‡§Ç ‡§Ü‡§ú‡§º‡§Æ‡§æ‡§è‡§Å", "try_free")
        ],
    }
}

PAIRS = ["BTCUSDT", "ETHUSDT", "EURUSD", "GBPUSD", "USDJPY", "USDCAD", "AUDUSD", "NZDUSD", "XAUUSD", "XAGUSD", "EURJPY", "GBPJPY", "USDCHF", "EURGBP", "AUDJPY"]
TIMEFRAMES = ["15s", "1m", "2m", "5m", "10m", "30m", "1h", "4h", "12h", "1d"]

# ---------- STATE ----------
user_lang: Dict[int, str] = {}
allowed = set()
free_uses: Dict[int, int] = {}

# ---------- UTILS ----------
def load_json(path, default):
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return default
    return default

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def photo(name):
    p = os.path.join(PHOTO_DIR, name)
    return p if os.path.exists(p) else None

async def send_photo_or_text(context, chat_id, fname, text, markup=None, delete_id=None):
    if delete_id:
        try: await context.bot.delete_message(chat_id, delete_id)
        except: pass
    p = photo(fname)
    if p:
        with open(p, "rb") as f:
            return await context.bot.send_photo(chat_id, f, caption=text, reply_markup=markup)
    else:
        return await context.bot.send_message(chat_id, text, reply_markup=markup)

# ---------- ADMIN ----------
async def cmd_allow(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("Only admin.")
    if not ctx.args: return await update.message.reply_text("/allow <id>")
    uid = int(ctx.args[0])
    allowed.add(uid)
    save_json(ALLOWED_FILE, list(allowed))
    lang = user_lang.get(uid, "en")
    await send_photo_or_text(ctx, uid, "pairs.jpg", TEXTS[lang]["access_granted"], markup=kb_pairs(lang))
    await update.message.reply_text(f"User {uid} allowed ‚úÖ")

# ---------- ONBOARDING ----------
def kb_lang():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en"),
         InlineKeyboardButton("üáÆüá≥ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", callback_data="lang_hi"),
         InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")]
    ])

def kb_next(cb): return InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è", callback_data=cb)]])

def kb_register(lang):
    btns = []
    for text, data in TEXTS[lang]["reg_btns"]:
        if data.startswith("http"):
            btns.append([InlineKeyboardButton(text, url=data)])
        else:
            btns.append([InlineKeyboardButton(text, callback_data=data)])
    return InlineKeyboardMarkup(btns)

def kb_pairs(lang):
    kb = []
    for i in range(0, len(PAIRS), 3):
        row = [InlineKeyboardButton(p, callback_data=f"pair|{p}") for p in PAIRS[i:i+3]]
        kb.append(row)
    return InlineKeyboardMarkup(kb)

def kb_tfs(lang):
    kb = []
    for i in range(0, len(TIMEFRAMES), 5):
        kb.append([InlineKeyboardButton(t, callback_data=f"tf|{t}") for t in TIMEFRAMES[i:i+5]])
    return InlineKeyboardMarkup(kb)

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_lang[update.effective_user.id] = "en"
    await send_photo_or_text(ctx, update.effective_chat.id, "lang.jpg", "Choose language / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", markup=kb_lang())

async def is_subscribed(bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception:
        return False

async def choose_lang(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    lang = q.data.split("_")[1]
    uid = q.from_user.id
    user_lang[uid] = lang
    await q.message.delete()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await is_subscribed(ctx.bot, uid):
        sub_texts = TEXTS[lang]["subscribe"]
        btn = InlineKeyboardMarkup([
            [InlineKeyboardButton(sub_texts["btn_sub"], url=f"https://t.me/{CHANNEL_USERNAME.replace('@', '')}")],
            [InlineKeyboardButton(sub_texts["btn_check"], callback_data="check_sub")]
        ])
        await send_photo_or_text(ctx, uid, "subscribe.jpg",
                                 sub_texts["text"], markup=btn)
        return

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    await send_photo_or_text(ctx, uid, "welcome.jpg", TEXTS[lang]["welcome"], markup=kb_next("why"))

async def check_sub(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    lang = user_lang.get(uid, "en")
    sub_texts = TEXTS[lang]["subscribe"]

    if await is_subscribed(ctx.bot, uid):
        await q.message.delete()
        await send_photo_or_text(ctx, uid, "welcome.jpg", TEXTS[lang]["welcome"], markup=kb_next("why"))
    else:
        try:
            await q.message.edit_caption(caption=sub_texts["not_sub"])
        except:
            await q.message.edit_text(sub_texts["not_sub"])

async def step_show(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    lang = user_lang.get(uid, "en")
    step = q.data
    await q.message.delete()
    seq = {
        "why": ("why.jpg", TEXTS[lang]["why"], "how"),
        "how": ("how.jpg", TEXTS[lang]["how"], "about"),
        "about": ("about.jpg", TEXTS[lang]["about"], "register")
    }
    if step in seq:
        img, txt, nxt = seq[step]
        await send_photo_or_text(ctx, uid, img, txt, markup=kb_next(nxt))
    elif step == "register":
        await send_photo_or_text(ctx, uid, "register.jpg", TEXTS[lang]["register"], markup=kb_register(lang))

async def registered_ok(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    lang = user_lang.get(uid, "en")
    await q.message.delete()
    await ctx.bot.send_message(ADMIN_ID, f"üì• User {uid} ({lang}) registered.")
    await send_photo_or_text(ctx, uid, "wait.jpg", TEXTS[lang]["limited"])

# ---------- FREE TRIAL ----------
async def try_free(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    lang = user_lang.get(uid, "en")
    n = free_uses.get(uid, 0)
    if n >= FREE_LIMIT:
        await q.message.delete()
        await send_photo_or_text(ctx, uid, "register.jpg", TEXTS[lang]["limited"], markup=kb_register(lang))
        return
    free_uses[uid] = n + 1
    save_json(FREE_FILE, free_uses)
    await q.message.delete()
    await send_photo_or_text(ctx, uid, "pairs.jpg", TEXTS[lang]["pair"] + f"\n\n{TEXTS[lang]['free_left'].format(n=FREE_LIMIT - free_uses[uid])}", markup=kb_pairs(lang))

# ---------- FORECAST FLOW ----------
async def get_binance_price(symbol: str):
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
    try:
        async with aiohttp.ClientSession() as s:
            async with s.get(url, timeout=5) as r:
                data = await r.json()
                return float(data["price"])
    except:
        return random.uniform(1, 100)

async def choose_pair(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    pair = q.data.split("|")[1]
    ctx.user_data["pair"] = pair
    await q.message.delete()
    lang = user_lang.get(uid, "en")
    await send_photo_or_text(ctx, uid, "tf.jpg", TEXTS[lang]["tf"], markup=kb_tfs(lang))

async def choose_tf(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    tf = q.data.split("|")[1]
    lang = user_lang.get(uid, "en")
    pair = ctx.user_data.get("pair", "BTCUSDT")
    await q.message.delete()

    # show animation steps
    for msg in TEXTS[lang]["processing"]:
        m = await ctx.bot.send_message(uid, msg)
        await asyncio.sleep(1.2)
        await ctx.bot.delete_message(uid, m.message_id)

    price = await get_binance_price(pair)
    rsi = round(random.uniform(20, 80), 1)
    macd = round(random.uniform(-0.5, 0.5), 3)
    conf = random.randint(60, 95)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã
    if lang == "ru":
        signal = random.choice(["üìà –í–í–ï–†–•", "üìâ –í–ù–ò–ó"])
        reason = f"RSI={rsi}, MACD={macd}, —Ü–µ–Ω–∞ {price} ‚Äî —Ç—Ä–µ–Ω–¥ {'–≤–æ—Å—Ö–æ–¥—è—â–∏–π' if '–í–í–ï–†–•' in signal else '–Ω–∏—Å—Ö–æ–¥—è—â–∏–π'}."
        new_forecast = "üîÅ –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑"
    elif lang == "hi":
        signal = random.choice(["üìà ‡§ä‡§™‡§∞", "üìâ ‡§®‡•Ä‡§ö‡•á"])
        reason = f"RSI={rsi}, MACD={macd}, ‡§Æ‡•Ç‡§≤‡•ç‡§Ø {price} ‚Äî ‡§∞‡•Å‡§ù‡§æ‡§® {'‡§ä‡§™‡§∞ ‡§ï‡•Ä ‡§ì‡§∞' if '‡§ä‡§™‡§∞' in signal else '‡§®‡•Ä‡§ö‡•á ‡§ï‡•Ä ‡§ì‡§∞'}."
        new_forecast = "üîÅ ‡§®‡§Ø‡§æ ‡§™‡•ç‡§∞‡•á‡§°‡§ø‡§ï‡•ç‡§∂‡§®"
    else:
        signal = random.choice(["üìà UP", "üìâ DOWN"])
        reason = f"RSI={rsi}, MACD={macd}, price {price} ‚Äî trend is {'upward' if 'UP' in signal else 'downward'}."
        new_forecast = "üîÅ New forecast"

    txt = TEXTS[lang]["result"].format(pair=pair, tf=tf, signal=signal, conf=conf, reason=reason)

    # üñº –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–≥–Ω–∞–ª–∞
    if any(x in signal for x in ["–í–í–ï–†–•", "UP", "‡§ä‡§™‡§∞"]):
        img_name = "up.jpg"
    else:
        img_name = "down.jpg"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Å –Ω—É–∂–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    await send_photo_or_text(
        ctx,
        uid,
        img_name,
        txt,
        markup=InlineKeyboardMarkup([[InlineKeyboardButton(new_forecast, callback_data="try_free")]])
                                )

async def healthcheck(request):
    return web.Response(text="Bot is running!")

def start_webserver():
    app = web.Application()
    app.add_routes([web.get("/", healthcheck)])
    web.run_app(app, port=int(os.environ.get("PORT", 10000)), handle_signals=False)


threading.Thread(target=start_webserver, daemon=True).start()

# ---------- MAIN ----------
def main():
    global allowed, free_uses
    allowed = set(load_json(ALLOWED_FILE, []))
    free_uses = load_json(FREE_FILE, {})

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("allow", cmd_allow))
    app.add_handler(CallbackQueryHandler(choose_lang, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(step_show, pattern="^(why|how|about|register)$"))
    app.add_handler(CallbackQueryHandler(registered_ok, pattern="^registered_ok$"))
    app.add_handler(CallbackQueryHandler(try_free, pattern="^try_free$"))
    app.add_handler(CallbackQueryHandler(choose_pair, pattern="^pair\\|"))
    app.add_handler(CallbackQueryHandler(choose_tf, pattern="^tf\\|"))
    app.add_handler(CallbackQueryHandler(check_sub, pattern="^check_sub$"))
    
    print("Bot started...")
    app.run_polling()

if __name__ == "__main__":
    main()
